---
import Footer from "~/components/Footer.astro";
import Navbar from "~/components/Navbar.astro";
import Base from "./_base.astro";

import Cmd from "~/components/Cmd.astro";
import ScrollTop from "~/components/ScrollTop";

import { type LayoutProps } from "~/consts";
export type Props = LayoutProps;

const { title, description, image } = Astro.props;
const { pathname } = Astro.url;
const isBlogPost = pathname !== "/blog" && pathname !== "/blog/" && pathname.startsWith("/blog/");
const pageImage = image || (title !== "404" && !isBlogPost ? "/images/cover.jpg" : undefined);

let cmdText;
if (title === "404") {
  cmdText = `cd ${pathname}`;
} else if (pathname === "/") {
  cmdText = `whoami -h`;
} else if (pathname.startsWith("/blog") && !isBlogPost) {
  cmdText = `blog --index`;
} else if (pathname.startsWith("/contact")) {
  cmdText = `contact --me`;
}
---

<Base title={title} description={description} image={pageImage}>
  {/* cursor trail */}
  <div id="__trail" class="trail_hidden pointer-events-none fixed left-0 top-0 z-10 opacity-0">
    <div
      id="__emoticon"
      class="animate-emoticon text-sm text-gruvbox-fg3 dark:text-gruvboxDark-fg4"
    >
    </div>
  </div>

  <div class="mx-2 pt-24 md:mx-16 lg:mx-36 xl:mx-52 2xl:mx-72">
    <ScrollTop client:idle />

    <Navbar />

    {/* window content */}
    <div
      class="relative z-20 overflow-y-auto border border-t-0 border-gruvbox-bg1 bg-gruvbox-bg p-4 shadow-xl dark:border-gruvboxDark-bg dark:bg-gruvboxDark-bgH"
    >
      {cmdText && <Cmd text={cmdText} />}

      <main class="min-h-[calc(100vh-14.3rem)]">
        <slot />
      </main>
      <Footer />
    </div>
  </div>

  <script>
    // remove fbclid query param
    const url = new URL(location.href);
    if (url.searchParams.has("fbclid")) {
      url.searchParams.delete("fbclid");
      window.history.replaceState(null, "", url);
    }

    // mouse cursor trail
    let highlighted = false;
    let hasMoved = false;
    let trail = document.getElementById("__trail");

    const emoticonChoices = [
      "(⁠ﾉ⁠◕⁠ヮ⁠◕⁠)⁠ﾉ⁠*⁠.⁠✧",
      "╰⁠(⁠ ⁠･⁠ ⁠ᗜ⁠ ⁠･⁠ ⁠)⁠➝",
      "┌⁠(⁠・⁠。⁠・⁠)⁠┘⁠♪",
      "(⁠人⁠ ⁠•͈⁠ᴗ⁠•͈⁠)",
      "/⁠ᐠ⁠｡⁠ꞈ⁠｡⁠ᐟ⁠\\",
      "(⁠^⁠～⁠^⁠;⁠)⁠ゞ",
      "♪⁠(⁠┌⁠・⁠。⁠・⁠)⁠┌",
      "^_^",
    ];
    let emoticon = document.getElementById("__emoticon");

    function randomEmoticon() {
      if (!emoticon) return;
      emoticon.innerText = emoticonChoices[Math.floor(Math.random() * emoticonChoices.length)];
    }

    randomEmoticon();

    document.addEventListener("astro:page-load", () => {
      highlighted = false;
      hasMoved = false;
      trail = document.getElementById("__trail");
      emoticon = document.getElementById("__emoticon");
      randomEmoticon();
    });

    window.addEventListener("mousemove", (e) => {
      if (!trail) return;
      let duration = 500;

      if (!hasMoved) {
        hasMoved = true;
        trail.classList.remove("trail_hidden");
        duration = 0;
      }

      const x = e.clientX - trail.offsetWidth / 2,
        y = e.clientY - trail.offsetHeight / 2;

      const keyframes = {
        transform: `translate(${x}px, ${y}px)`,
      };

      trail.animate(keyframes, {
        duration: duration,
        fill: "forwards",
      });
    });
    document.addEventListener("mouseover", (e) => {
      if (!trail) return;
      if (
        (e.target as HTMLElement).classList.contains("__highlight") ||
        (e.target as HTMLElement).parentElement?.classList.contains("__highlight")
      ) {
        if (!highlighted) highlighted = true;
        if (!trail.classList.contains("trail_hidden")) {
          trail.classList.add("trail_hidden");
        }
      } else {
        if (highlighted) highlighted = false;
        if (hasMoved && trail.classList.contains("trail_hidden")) {
          trail.classList.remove("trail_hidden");
        }
      }
    });
  </script>
</Base>
